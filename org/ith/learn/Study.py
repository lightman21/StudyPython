import sysimport xlrdimport xlwt# 所有字符串 key cn enall_string = "../../../docs/OnMobile-Android_app_all_strings.xlsx"# 待翻译 key cnwait_trans = "../../../docs/OnMobile-Android_app_wait_dict.xlsx"all_trans = "../../../docs/all_trans_ed.xlsx"out_dir = "../../../docs/"from org.ith.learn.TUtils import KCEBeandef main(argv=None):    if argv is None:        argv = sys.argv    all_trans_list = remove_empty(open_excel_as_list(all_trans))    all_string_list = remove_empty(open_excel_as_list(all_string))    # str1 = '\n'.join(str(e) for e in all_string_list)    # print(str1)    no_key_list = []    count = 0    key_list = []    for item in all_trans_list:        if has_key(item.cn, all_string_list):            count += 1            key_list.append(item)        else:            no_key_list.append(item)    print("find key " + str(count) + ",no key size " + str(len(no_key_list)) + ", all trans size " + str(        len(all_trans_list)) + ", all string size " + str(len(all_string_list)))    write_to_excel(all_string_list)def write_to_excel(to_write_list, file_name='/path_of_excelwrite.xlsx'):    workbook = xlwt.Workbook()    worksheet = workbook.add_sheet('sheet_of_kce')    worksheet.write(0, 0, "key")    worksheet.write(0, 1, "cn")    worksheet.write(0, 2, "en")    for row, item in enumerate(to_write_list):        for column in range(3):            key = item.key            cn = item.cn            en = item.en            row += 1            if column == 0:                worksheet.write(row, column, key)            elif column == 1:                worksheet.write(row, column, cn)            else:                worksheet.write(row, column, en)    workbook.save(out_dir + file_name)    print("done!")def open_excel_as_list(file_path):    data = xlrd.open_workbook(file_path)    sheets = data.sheets()    list_keys = []    list_china = []    list_english = []    # key cn en    sheet = sheets[0]    cols_count = sheet.ncols    is_one_column = cols_count == 1    is_two_column = cols_count > 2 and (len(sheet.col(2)[0].value) == 0)    is_three_column = cols_count > 2 and (len(sheet.col(2)[0].value) != 0)    rg = 3 if is_three_column else 2 if is_two_column else 1    # print(str(file_path) + " cols_count " + str(cols_count)    #       + ",is_three_column " + str(is_three_column) + ", range " + str(rg))    for col in range(rg):        # read three clumn key cn en        if is_three_column:            if col == 0:                list_keys = sheet.col(col)            elif col == 1:                list_china = sheet.col(col)            else:                list_english = sheet.col(col)        elif is_one_column:            if col == 0:                list_china = sheet.col(col)        elif is_two_column:            if col == 0:                list_china = sheet.col(col)            elif col == 1:                list_english = sheet.col(col)    list_kces = []    for i in range(len(list_china)):        if is_one_column:            list_kces.append(KCEBean("", list_china[i].value, ""))        if is_two_column:            list_kces.append(KCEBean("", list_china[i].value, list_english[i].value))        if is_three_column:            list_kces.append(KCEBean(list_keys[i].value, list_china[i].value, list_english[i].value))    return list_kcesdef remove_empty(mlist, need_replace=False):    tmp = []    for t in mlist:        if not need_replace and len(str(t.cn)) > 0 and len(str(t.en)) > 0:            tmp.append(t)        elif need_replace and len(str(t.cn)) > 0 and len(str(t.en)) > 0:            tcn = str(t.cn).replace("，", ",").replace("。", ".")            t.cn = tcn            tmp.append(t)        elif len(str(t.cn)) > 0:            tmp.append(t)    return tmpdef has_key(str_cn, all_trans_list):    for item in all_trans_list:        if item.cn == str_cn:            return item.keyif __name__ == "__main__":    sys.exit(main())